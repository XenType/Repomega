NEXT
    OmegaObject integration tests
    - clean up object creation in parent/child 1/N tests
    - create lateral tests
    Error Refactor
    - Reorganize Source/Suffix implementation for greater flexibility
    - Look into stack information?
    - Allow full field validation to complete before throwing Error
    - adjust tests to reflect any format changes
    OmegaFactory planning
    - Use to expose friendly versions of intended
        public repository methods
    - Repos should be tracked and created on demand
    - Repo index added to OmegaObjects
    - Will have to use alternate methods of mocking
        during unit test phase
    OmegaFactory development / unit test phase
    OmegaFactory integration tests
    Refactor large functions
    Refactor tests/fixtures

DISTANT

    Find missing test coverage
    NPM publishing
    Config / setup
